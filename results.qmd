# Results
```{r, echo = FALSE, message = FALSE, warning = FALSE, cache = FALSE, fig.width = 30, fig.height = 10}
# Load required packages
if (!require("fmsb")) install.packages("fmsb")
if (!require("tidyverse")) install.packages("tidyverse")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("viridis")) install.packages("viridis")
if (!require("reshape2")) install.packages("reshape2")
if (!require("readxl")) install.packages("readxl")
if (!require("corrplot")) install.packages("corrplot")

# Load the Excel file
library(readxl)
library(dplyr)
library(tidyverse)

# Load the data from the sheet
data <- read_csv("./data/hiv.csv")
data[data=='-'] <- NA
#Replace the NA values with 0's
for(column_name in names(data)) {
  data[[column_name]][is.na(data[[column_name]])] <- 0
}

```

## Analysis of Overweight Percentages in 2020


```{r, echo = FALSE, message = FALSE, warning = FALSE, cache = FALSE}
library(ggplot2)
library(dplyr)
library(readr)
library(tidyverse)

# Load the data
nutrition_data <- read_csv("./data/Nutrition.csv")

# Clean the column names to remove excess periods and line breaks
colnames(nutrition_data) <- gsub("\\.\\n|\\.{2,}", "", colnames(nutrition_data))
colnames(nutrition_data) <- gsub("\\s+", " ", colnames(nutrition_data))

# Convert 'Overweight (%) (2020)' to numeric, remove NAs
nutrition_data <- nutrition_data %>%
  mutate(Overweight_2020 = as.numeric(`Overweight (%) (2020)`)) %>%
  drop_na(Overweight_2020) %>%
  arrange(desc(Overweight_2020))

# Calculate the number of rows for the top 10%
top_10_percent_rows <- round(nrow(nutrition_data) * 0.1)

# Get the top 10% of the data
top_10_percent <- nutrition_data %>%
  slice_max(order_by = Overweight_2020, n = top_10_percent_rows)

# Create the bar chart with different colors for each country
ggplot(top_10_percent, aes(x = reorder(`Countries and areas`, Overweight_2020), y = Overweight_2020, fill = `Countries and areas`)) +
  geom_bar(stat = "identity") +
  scale_fill_viridis_d() +  # Use Viridis color scale for distinct colors
  coord_flip() +  # Flip coordinates for a horizontal bar chart
  labs(x = "Countries", y = "Overweight (%)", title = "Top 10% Overweight Percentage by Country in 2020") +
  theme_minimal() +
  theme(axis.text.y = element_text(angle = 45, hjust = 1), legend.position = "none")  # Adjust the text angle for country names and remove legend


```

The bar chart above illustrates the top 10% of countries with the highest percentages of overweight individuals in the year 2020. This visualization helps in identifying the countries that are facing the most significant challenges related to overweight populations. Notably, Libya tops the chart, followed by Lebanon and Australia, indicating a need for targeted public health interventions in these areas. The variation in color for each country enhances the chart's readability and allows for quick comparison across the countries listed. Such data is crucial for policymakers and health professionals who are working to combat obesity and promote healthier lifestyles.



## Bar Chart (Incidence Rates in Children (0-14))
```{r}
data$inciChildren0to14 <- as.numeric(data$inciChildren0to14)
filtered_data <- data %>% 
  filter(inciChildren0to14 > 1)
ggplot(filtered_data, aes(x = Countries, y = inciChildren0to14)) +
  geom_bar(stat = "identity", fill = 'cornflowerblue', color = 'black') +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "HIV Incidence Rates in Children (0-14)", x = "Country", y = "Incidence Rate")
```

## Histogram (Distribution of Mortality Rates in Adoloscents(10-19))
```{r}
data$mortAdolescents10to19 <- as.numeric(data$mortAdolescents10to19)

sorted_data <- data %>% 
  arrange(desc(mortAdolescents10to19))

ggplot(data, aes(x = mortAdolescents10to19)) + 
  geom_histogram(binwidth = 2, fill = "cornflowerblue", color = "black") + 
  labs(title = "Distribution of HIV Mortality Rates in Adolescents(10-19)")
```
```{r}
data_demo <- read_csv("./data/Demographics.csv")
data_demo[data_demo == '-'] <- NA
#Replace the NA values with 0's
for(column_name in names(data_demo)) {
  data[[column_name]][is.na(data_demo[[column_name]])] <- 0
}
```

## Scatter Plot for Life Expectancy and Annual Population Growth (2020-2030)
```{r}
library(ggplot2)
library(plotly)

data_demo$LifeExp2021 <- as.numeric(data_demo$LifeExp2021)
data_demo$AnnPopGrow2020to2030 <- as.numeric(data_demo$AnnPopGrow2020to2030)

p <- ggplot(data_demo, aes(x = LifeExp2021, y = AnnPopGrow2020to2030)) + 
  geom_point(aes(color = Countries))+
  labs(title = "Life Expectancy vs Annual Population Growth (2020-2030)",
       x = "Life Expectancy",
       y = "Annual Population Growth(2020-2030)") +
  theme_minimal()

ggplotly(p, tooltip = "text")

```

## Line Chart for Life Expectancy in 2021 for the top 10 Countries

```{r}
library(ggplot2)
library(dplyr)
data_demo$LifeExp2021 <- as.numeric(data_demo$LifeExp2021)

top_countries <- data_demo %>%
  top_n(10, LifeExp2021) %>%
  arrange(LifeExp2021)

ggplot(top_countries, aes(x = reorder(Countries, LifeExp2021), y = LifeExp2021, group=1 ))+
  geom_line() + 
  geom_point() + 
  labs(title = "Life Expentacy in 2021 for the top 10 Countries",
       x = "Countries",
       y = "Life Expectancy in 2021") + 
  theme_minimal()+
  coord_flip()
  
```

## Heatmap for showing correlation


```{r}
library(corrplot)

numerical_cols <- c('AnnPopGrow2000to2020', 'AnnPopGrow2020to2030', 'LifeExp2021', 
                     'TotFert', 'TotDepRatio', 'ShareUrbanPop', 'NetMigRate')
data_demo[numerical_cols] <- lapply(data_demo[numerical_cols], as.numeric)

corr_matrix <- cor(data_demo[numerical_cols], use = 'complete.obs')

corrplot(corr_matrix, method='color', tl.col="black", type = "upper", tl.srt = 45)
```

## Pie Chart for Population Breakdown
```{r}
library(ggplot2)
data_demo$PopUtot <- as.numeric(data_demo$PopUtot)
data_demo$PopU18 <- as.numeric(data_demo$PopU18)
data_demo$PopU5 <- as.numeric(data_demo$PopU5)
country_data <- data_demo[117, ]

long_data <- country_data %>%
  select
pie_data <- data.frame(
  Category = c("Population under 5", "Population under 18", "Others"),
  Values = c(country_data$PopU5, country_data$PopU18, country_data$PopUtot - country_data$PopU5 - country_data$PopU18))
  
ggplot(pie_data, aes(x = "", y = Values, fill = Category)) + 
  geom_bar(width = 1, stat = 'identity') +
  coord_polar("y", start = 0) +
  theme_void()+
  labs(title = paste("Population Breakdown for ", country_data$Countries)) +
  theme(legend.title = element_blank()) +
  scale_fill_brewer(palette = "Pastel1")
```

## Stacked Bar chart for top 3 countries
```{r}
library(ggplot2)
library(dplyr)
library(tidyr)

# Assuming the data is already loaded into a variable named 'data_demo'

# Convert the relevant columns to numeric
data_demo$PopUtot <- as.numeric(data_demo$PopUtot)
data_demo$PopU18 <- as.numeric(data_demo$PopU18)
data_demo$PopU5 <- as.numeric(data_demo$PopU5)

# Select countries based on specified row numbers
selected_countries <- data_demo[c(10, 90), ]

# Reshape the data into a long format for plotting
long_data <- selected_countries %>%
  select(Countries, PopUtot, PopU18, PopU5) %>%
  pivot_longer(cols = c("PopU18", "PopU5"), names_to = "Category", values_to = "Values") %>%
  mutate(Category = case_when(
    Category == "PopU18" ~ "Population Under 18",
    Category == "PopU5" ~ "Population Under 5",
    TRUE ~ "Others"
  ))

# Calculate the 'Others' category
long_data$Values[long_data$Category == "Others"] <- with(selected_countries, PopUtot - PopU18 - PopU5)

# Create the stacked bar chart
ggplot(long_data, aes(x = Countries, y = Values, fill = Category)) +
  geom_bar(stat = 'identity') +
  labs(title = "Population Breakdown for Selected Countries",
       x = "Country", y = "Population") +
  scale_fill_brewer(palette = "Pastel1") +
  theme_minimal()

```
